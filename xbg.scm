(define (succ x) (+ x 1))
(define (pred x) (- x 1))
(define (recip x) (/ 1 x))

(define (comp f g) (lambda (x) (f (g x))))

(define map (lambda a
 (let ((f (car a))
       (l (cdr a)))
  (letrec 
   ((m (lambda (l)
	(let ((x (car l)))
	 (cond
	  ((null? x) ())
	  ((pair? x) (cons
		      (m (mapcar car l))
		      (m (mapcar cdr l))))
	  (t (apply f l)))))))
   (m l)))))

(define (interp t a b x y)
 (+ x (* (- t a) (/ (- y x) (- b a)))))
(define (imap t a b x y)
 (map (lambda (x y) (interp t a b x y)) x y))

(define (pwi t l)
 (let ((ax (car l))
       (r (cdr l)))
  (if (or (< t (car ax)) (null? r)) (cdr ax)
  (let ((by (car r)))
   (if (<= t (car by))
    (imap t (car ax) (car by) (cdr ax) (cdr by))
    (pwi t r))))))

(define (degnorm x)
 (cond 
  ((> x 180) (degnorm (- x 360)))
  ((< x -180) (degnorm (+ x 360)))
  (t x)))

(define (drawable-size d)
 (if d
  (cons
   (car (gimp-drawable-width d))
   (car (gimp-drawable-height d)))
 '(0 . 0)))

(define (get-image-layer img l)
 (let* ((layers (gimp-image-get-layers img))
        (n (if (>= l 0) l (+ (car layers) l))))
  (aref (cadr layers) n)))

(define (notempty? x) (and x (not (equal? "" x))))

(define (%d x) (number->string x 10))

(define (xbg out dim sunpos weather)
 (let* ((w (car dim))
	(h (cdr dim))
	(dim1 (map pred dim))
	(pix (lambda (xy) (map / xy dim1)))
	(pos (lambda (xy) (map * dim1 xy)))
	(posx (comp car pos))
	(posy (comp cdr pos))

	(img (car (gimp-image-new w h RGB)))
	(_ (gimp-image-undo-disable img))

	(bord 50)
	(border (pix (cons bord bord)))
	(add-img (lambda (file)
		  (if (notempty? file)
		   (let* ((path (string-append xbg-dir "images/" file ".png"))
			  (fimg (car (gimp-file-load RUN-NONINTERACTIVE path file)))
			  (fl (car (gimp-image-get-active-layer fimg)))
			  (l (car (gimp-layer-new-from-drawable fl img))))
		    (gimp-image-delete fimg)
		    (gimp-drawable-set-name l file)
		    l))))
	(add-text (lambda (text pos align color)
		   (let* ((size 20)
			  (font "Sans")
			  (ext (gimp-text-get-extents-fontname text size PIXELS font))
			  (pos (map - pos (map * align (cons (car ext) (cadr ext))))))
		    (gimp-context-set-foreground color)
		    (car (gimp-text-fontname img -1 (car pos) (cdr pos) text 0 TRUE size PIXELS font)))))
	(ascpos (lambda (asc) (pwi asc
			       '((-180 0.5 . 1)
			         ( -90 0   . 1)
				 ( -45 0   . 0)
				 (  45 1   . 0)
				 (  90 1   . 1)
				 ( 180 0.5 . 1)))))

	(sunalt (nth 0 sunpos))
	(sunasc (nth 2 sunpos))
	(am (> sunasc 0)))
  (srand (realtime))
	
  (let* ((bg (car (gimp-layer-new img w h RGB-IMAGE "bg" 100 0)))
	 (grad (car (gimp-gradient-new "xbg")))
	 (gstart (ascpos sunasc))
	 (gend (map - '(1 . 1) gstart))
	 (gcs (pwi sunalt (list
			   (cons -90  '(( 20  20  80) ( 20  20  80) ( 20 20 80)))
			   (cons -32  '(( 60  60 120) ( 20  20 110) ( 20 20 80)))
			   (cons -10 (if am
				      '(( 40  40 140) ( 40  40 120) ( 40 40  80))
				      '((170 120 210) (100  90 170) ( 60 80 170))))
			   (cons  -5 (if am
				      '((200 200 170) (100 100 140) ( 40  40 100))
				      '((230 150 240) (100 100 200) ( 80 120 180))))
			   (cons   0 (if am
				      '((240 240  80) (140 150 170) ( 80 100 160))
				      '((250 200 190) ( 80 160 240) ( 70 140 210))))
			   (cons   8 (if am
				      '((240 250 170) (170 200 210) (100 130 200))
				      '((185 190 235) ( 70 170 250) ( 55 180 250))))
			   (cons  16 (if am
				      '((230 230 235) (170 220 250) (100 150 220))
				      '((170 180 220) ( 62 191 250) ( 70 200 255))))
			   (cons  32  '(( 60 190 240) (100 200 255) (100 170 250)))
			   (cons  90  '((120 200 255) (140 200 250) (150 220 250)))))))
   (gimp-image-add-layer img bg 0)
   (gimp-gradient-segment-range-split-uniform grad 0 0 2)
   (gimp-gradient-segment-set-left-color  grad 0 (car   gcs) 100)
   (gimp-gradient-segment-set-right-color grad 0 (cadr  gcs) 100)
   (gimp-gradient-segment-set-left-color  grad 1 (cadr  gcs) 100)
   (gimp-gradient-segment-set-right-color grad 1 (caddr gcs) 100)
   (gimp-context-set-gradient grad)
   (gimp-edit-blend bg CUSTOM-MODE 0 GRADIENT-RADIAL 100 0 REPEAT-NONE FALSE FALSE 0 0 TRUE
    (posx gstart) (posy gstart) (posx gend) (posy gend))
   (gimp-gradient-delete grad)

  )

  (if (> sunalt 0)
   (let* ((sunpos (ascpos sunasc))
          (bg (get-image-layer img -1))
          ;(sun (gimp-layer-new img w h RGBA-IMAGE "sun" 100 NORMAL-MODE))
	  ;(flare (gimp-layer-new img w h RGBA-IMAGE "flare" 50 SCREEN-MODE))
	 )
    (plug-in-flarefx RUN-NONINTERACTIVE img bg (posx sunpos) (posy sunpos))
    ;(gimp-image-add-layer img sun -1)
    ;(gimp-image-add-layer img flare -1)
   ))
  
  (let* ((pom (/ (nth 4 sunpos) 100))
	 (pomn 24)
	 (pomi (trunc (fmod (+ (* pomn (/ (succ pom) 2)) 0.5) pomn)))
	 (moon (add-img (string-append "moon-" (%d pomi))))
	 (moonasc (degnorm (+ sunasc (* 180 (succ pom)))))
	 (moonpos (map + (map * (ascpos moonasc) (map - '(1 . 1) (map + (pix (drawable-size moon)) (map * '(2 . 2) border)))) border))
	 (moonopa (pwi sunalt '((-32 . 100) (16 . 25)))))
   (gimp-image-add-layer img moon -1)
   (gimp-layer-set-offsets moon (posx moonpos) (posy moonpos))
   (gimp-layer-set-mode moon LIGHTEN-ONLY)
   (gimp-layer-set-opacity moon moonopa)
  )

  (if (notempty? weather)
   (begin
    (if (> (nth 4 weather) 0)
     (let* ((cp (nth 4 weather))
	    (wspd (nth 6 weather))
	    (wdir (nth 7 weather))
	    (bg (get-image-layer img -1))
	    (bghist (gimp-histogram bg HISTOGRAM-VALUE 0 255))
	    (cloud (car (gimp-layer-new img w h RGBA-IMAGE "cloud" 100 NORMAL-MODE))))
      (gimp-image-add-layer img cloud -1)
      (plug-in-plasma RUN-NONINTERACTIVE img cloud (rand) (/ w 800))
      (gimp-desaturate cloud)
      (plug-in-normalize RUN-NONINTERACTIVE img cloud)
      ;(plug-in-solid-noise RUN-NONINTERACTIVE img cloud 0 0 (rand) 0 (/ w 120) (/ h 120))
      (plug-in-colortoalpha RUN-NONINTERACTIVE img cloud '(0 0 0))
      (gimp-levels cloud HISTOGRAM-VALUE 0 255 1 0 (car bghist))
      (gimp-levels cloud HISTOGRAM-ALPHA 
       (- 128 (* (/ 256 *pi*) (asin (- (/ cp 50) 1)))) 255
       ;(pwi cp '((0 . 255) (5 . 192) (10 . 160) (33 . 128) (66 . 64) (75 . 0))) 255
       (pow 10 (* 0.6 (pow (/ cp 100) 2)))
       ;(pow 10 (pwi cp '((75 . 0) (100 . 0.6))))
       0 255)
      (plug-in-mblur RUN-NONINTERACTIVE img cloud 0 (* 1 wspd) (+ 90 wdir) 0 0)
     ))

    (if (> (nth 5 weather) 0)
     (let* ((rp (nth 5 weather))
	    (wspd (nth 6 weather))
	    (wdir (nth 7 weather))
	    (rain (car (gimp-layer-new img w h RGBA-IMAGE "rain" 100 ADDITION-MODE))))
      (gimp-image-add-layer img rain -1)
      (plug-in-randomize-hurl RUN-NONINTERACTIVE img rain 1 1 FALSE (rand))
      (gimp-hue-saturation rain ALL-HUES 0 0 -80)
      (plug-in-mblur RUN-NONINTERACIVE img rain 0 (* 1 wspd) (+ 90 wdir) 0 0)
      (gimp-levels rain HISTOGRAM-VALUE 0 255 (pow 10 (- (/ pop 50) 1)) 0 255)
     ))

    (let* ((wcondi (assoc (car weather)
		    '((few . "sun")	  (nfew . "sun")
		      (sct . "partlysun") (nsct . "partlysun")
		      (bkn . "partly")	  (nbkn . "partly")
		      (ovc . "cloudy") 	  (novc . "cloudy")
		      (fg . "fog") 	  (nfg . "fog")
		      (ra . "rain") 	  (nra . "rain")
		      (rasn . "rainsnow") (nrasn . "rainsnow")
		      (sn . "snow") 	  (nsn . "snow")
		     )))
	   (wcond (if wcondi (add-img (cdr wcondi))))
	   (wcsize (drawable-size wcond))
	   (wcsize (if wcsize (map (lambda (x) (* x (/ bord (cdr wcsize)))) wcsize))))
     (if wcond
      (begin
       (gimp-image-add-layer img wcond -1)
       (gimp-layer-scale wcond (car wcsize) (cdr wcsize) 1)
       (gimp-layer-set-offsets wcond (- w (car wcsize)) 0)
      )))

    (let* ((hit (nth 2 weather))
	   (lot (nth 1 weather))
	   (curt (nth 3 weather))
	   (ti (lambda (lo hi) (imap curt lot hit lo hi)))
	   (hic '(255 0 0))
	   (loc '(0 0 255))
	   (x (- w 2))
	   (hiy 2)
	   (loy (- bord 2))
	   (hi (add-text (%d hit) (cons x hiy) '(1 . 0) hic))
	   (lo (add-text (%d lot) (cons x loy) '(1 . 1) loc))
	   (hilow (max (car (gimp-drawable-width lo)) (car (gimp-drawable-width hi))))
	   (cur (add-text (%d curt) (cons (- x (+ hilow 4)) (/ bord 2)) (cons 1 0.5) (ti loc hic))))
    )
   ))

  (if (notempty? out)
   (let ((draw (car (gimp-image-flatten img))))
    (file-ppm-save 1 1 draw out out 1)))

  (gimp-image-undo-enable img)
  img))
